name: "Build and Attach Wheel to Release"

on:
  release:
    types: [published, prereleased]
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [main]

jobs:
  build_and_attach_wheel:
    if: github.event_name == 'release' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Base Setup
        uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1

      - name: Install dependencies
        run: python -m pip install -U "jupyterlab>=4.0.0,<5"

      - name: Build the extension
        run: |
          set -eux
          jlpm
          jlpm run build:prod

      - name: Build wheel
        run: |
          set -eux
          pip install build
          python -m build --wheel

      - name: Get wheel filename
        id: get_wheel
        run: |
          wheel_file=$(ls dist/*.whl | head -n 1)
          echo "wheel_file=$wheel_file" >> $GITHUB_OUTPUT
          echo "wheel_name=$(basename $wheel_file)" >> $GITHUB_OUTPUT

      - name: Handle release upload or PR prerelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            # Upload to existing release
            gh release upload ${{ github.event.release.tag_name }} \
              ${{ steps.get_wheel.outputs.wheel_file }} \
              --clobber
          else
            # Create or update PR prerelease
            if [ -f "package.json" ]; then
              version=$(jq -r '.version // "0.1.0"' package.json)
            else
              version="0.1.0"
            fi
            
            prerelease_tag="v${version}-pr${{ github.event.pull_request.number }}"
            
            # Delete existing prerelease if exists
            if gh release view $prerelease_tag >/dev/null 2>&1; then
              gh release delete $prerelease_tag --yes
            fi
            
            # Create new prerelease
            gh release create $prerelease_tag \
              --title "PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}" \
              --notes "Prerelease build for PR #${{ github.event.pull_request.number }}
            
            **PR Title:** ${{ github.event.pull_request.title }}
            **Branch:** ${{ github.event.pull_request.head.ref }}
            **Commit:** ${{ github.sha }}
            
            This is an automated prerelease build. Install with:
            \`\`\`bash
            pip install ${{ github.event.repository.html_url }}/releases/download/${prerelease_tag}/${{ steps.get_wheel.outputs.wheel_name }}
            \`\`\`" \
              --prerelease \
              --target ${{ github.sha }} \
              ${{ steps.get_wheel.outputs.wheel_file }}
            
            # Comment on PR
            existing_comment=$(gh api repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
              --jq '.[] | select(.body | contains("ðŸš€ Prerelease build available")) | .id' | head -n1)
            
            comment_body="ðŸš€ **Prerelease build available**
            
            A prerelease has been created for this PR: [${prerelease_tag}](${{ github.event.repository.html_url }}/releases/tag/${prerelease_tag})
            
            Install this build with:
            \`\`\`bash
            pip install ${{ github.event.repository.html_url }}/releases/download/${prerelease_tag}/${{ steps.get_wheel.outputs.wheel_name }}
            \`\`\`
            
            _This comment will be updated automatically when the PR is updated._"
            
            if [ -n "$existing_comment" ]; then
              gh api repos/${{ github.repository }}/issues/comments/$existing_comment \
                --method PATCH \
                --field body="$comment_body"
            else
              gh pr comment ${{ github.event.pull_request.number }} --body "$comment_body"
            fi
          fi

  cleanup_prerelease:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Delete PR prerelease
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [ -f "package.json" ]; then
            version=$(jq -r '.version // "0.1.0"' package.json)
          else
            version="0.1.0"
          fi
          
          prerelease_tag="v${version}-pr${{ github.event.pull_request.number }}"
          
          if gh release view $prerelease_tag >/dev/null 2>&1; then
            gh release delete $prerelease_tag --yes
            echo "Deleted prerelease $prerelease_tag"
          else
            echo "Prerelease $prerelease_tag not found"
          fi